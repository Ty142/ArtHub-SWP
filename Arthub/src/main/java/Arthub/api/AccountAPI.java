package Arthub.api;

import Arthub.dto.AccountDTO;
import Arthub.entity.Account;
import Arthub.repository.AccountRepository;
import Arthub.service.EmailTokenService;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import Arthub.service.AccountService;

import java.sql.SQLException;
import java.util.List;

import org.slf4j.LoggerFactory;
import org.slf4j.Logger;

@RestController
@RequestMapping("/api/Account")

public class AccountAPI {

    @Autowired
    private AccountService accountService;

    @Autowired
    private AccountRepository accountRepository;

    private final EmailTokenService emailTokenService;

    @Autowired
    public AccountAPI(EmailTokenService emailTokenService) {
        this.emailTokenService = emailTokenService;
    }

    /**
     * API l·∫•y t·∫•t c·∫£ t√†i kho·∫£n
     */
    @GetMapping
    public ResponseEntity<List<Account>> getAccounts() {
        List<Account> accounts = accountService.getAccounts();
        if (accounts.isEmpty()) {
            return ResponseEntity.noContent().build(); // Tr·∫£ v·ªÅ HTTP 204 n·∫øu danh s√°ch tr·ªëng
        }
        return ResponseEntity.ok(accounts); // HTTP 200
    }

    @PostMapping("/send-token")
    public ResponseEntity<String> sendTokenToEmail(@RequestBody AccountDTO accountDTO) {
        String email = accountDTO.getEmail();

        if (email == null || email.isEmpty()) {
            return ResponseEntity.badRequest().body("Email cannot be null or empty.");
        }
        String token = emailTokenService.generateAndSendToken(email);
        return ResponseEntity.ok(token);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Account> getAccountById(@PathVariable("id") int accountId) {
        System.out.println("üîç Received request for Account ID: " + accountId);
        Account account = accountService.getAccountById(accountId);

        if (account == null) {
            System.out.println("‚ö†Ô∏è Account not found for ID: " + accountId);
            return ResponseEntity.notFound().build();
        }

        System.out.println("‚úÖ Found account: " + account);
        return ResponseEntity.ok(account); // HTTP 200
    }

    @PostMapping("/CreateAccount")
    public ResponseEntity<String> createAccount(@RequestBody AccountDTO accountDTO) {
        if (accountService.isEmailExist(accountDTO.getEmail())) {
            return ResponseEntity.ok("");
        }
        boolean isCreated = accountService.createAccount(accountDTO);
        if (isCreated) {
            return ResponseEntity.ok("Account created successfully");
        } else {
            return ResponseEntity.badRequest().body("Failed to create account");
        }
    }



    private static final Logger logger = LoggerFactory.getLogger(AccountAPI.class);





    /**
     * API ƒë·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u d·ª±a tr√™n email
     * @param requestBody JSON ch·ª©a email v√† m·∫≠t kh·∫©u m·ªõi
     * @return ResponseEntity ch·ª©a th√¥ng b√°o k·∫øt qu·∫£
     */
    @PostMapping("/changepassword")
    public ResponseEntity<String> resetPassword(@RequestBody ChangePasswordRequest requestBody) {
        logger.info("üîç Received request to change password for email: {}", requestBody.getEmail());

        try {
            // Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i kh√¥ng
            Account account = accountRepository.getAccountByEmail(requestBody.getEmail());
            if (account == null) {
                logger.warn("‚ö†Ô∏è Email '{}' kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng.", requestBody.getEmail());
                return ResponseEntity.badRequest().body("2");
            }

            // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o database
            boolean isUpdated = accountRepository.resetPassword(requestBody.getEmail(), requestBody.getNewPassword());
            if (isUpdated) {
                logger.info("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng cho email: {}", requestBody.getEmail());
                return ResponseEntity.ok("1");
            } else {
                logger.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho email: {}", requestBody.getEmail());
                return ResponseEntity.internalServerError().body("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.");
            }
        } catch (Exception e) {
            logger.error("‚ùå Unexpected error: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body("L·ªói h·ªá th·ªëng.");
        }
    }


    @PutMapping("/changepassword")
    public ResponseEntity<String> changePassword(@RequestBody ChangePasswordRequest requestBody) {
        logger.info("üîç Received request to change password for email: {}", requestBody.getEmail());

        try {
            // Ki·ªÉm tra xem email va password c√≥ t·ªìn t·∫°i kh√¥ng
            Account account = accountRepository.getAccountByEmailAndPassword(requestBody.getEmail(), requestBody.getOldPassword());
            if (account == null) {
                logger.warn("‚ö†Ô∏è Email '{}' g·ª≠i th√¥ng tin sai khi ƒë·ªïi m·∫≠t kh·∫©u.", requestBody.getEmail());
                return ResponseEntity.badRequest().body("2");
            }

            // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi v√†o database
            boolean isUpdated = accountRepository.changePasswordByEmail(requestBody.getEmail(), requestBody.getNewPassword(),requestBody.getOldPassword());
            if (isUpdated) {
                logger.info("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng cho email: {} | old {} | new {} ", requestBody.getEmail()
                , requestBody.getOldPassword(), requestBody.getNewPassword());

                return ResponseEntity.ok("1");
            } else {
                logger.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u cho email: {}", requestBody.getEmail());
                return ResponseEntity.internalServerError().body("L·ªói khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.");
            }
        } catch (SQLException e) {
            logger.error("‚ùå SQL Exception: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body("L·ªói h·ªá th·ªëng khi c·∫≠p nh·∫≠t m·∫≠t kh·∫©u.");
        } catch (Exception e) {
            logger.error("‚ùå Unexpected error: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body("L·ªói h·ªá th·ªëng.");
        }
    }
    // DTO ch·ª©a request body c·ªßa API
    public static class ChangePasswordRequest {
        private String newPassword;
        private String email;
        private String oldPassword;

        public String getNewPassword() { return newPassword; }
        public void setNewPassword(String newPassword) { this.newPassword = newPassword; }

        public String getEmail() { return email; }
        public void setEmail(String email) { this.email = email; }
        public String getOldPassword() { return oldPassword; }
        public void setOldPassword(String oldPassword) { this.oldPassword = oldPassword; }


    }

}
